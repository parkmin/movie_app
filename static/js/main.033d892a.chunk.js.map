{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","this","fetch","then","potato","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","medium_cover_image","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA4DA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,KAIJ,SAASK,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC5B,OACEP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,kBAqBvCO,MAtDf,SAAAC,GAAiD,IAAjCF,EAAiCE,EAAjCF,MAAOH,EAA0BK,EAA1BL,OAAQM,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACrC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAElCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKO,GACLT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZS,EAAOE,IAAI,SAACf,EAAMgB,GAAP,OACVf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAGnCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,KAAQL,EACRM,QAAQ,IACRC,SAAS,MACTC,WAAS,EAACC,QAAQ,gBC0DfC,6MAlFbC,MAAQ,KA4CPC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAESC,EAAKC,WAFd,OAENP,EAFMG,EAAAK,KAIZF,EAAKG,SAAS,CACZT,WALU,wBAAAG,EAAAO,SAAAX,EAAAY,WASdJ,SAAW,WACT,OAAOK,MAAM,yDACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKhB,SACvBiB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,cAAgB,WASd,OARef,EAAKT,MAAMG,OAAOb,IAAI,SAAAmC,GAEnC,OADAH,QAAQC,IAAIE,GACLjD,EAAAC,EAAAC,cAACgD,EAAD,CAAOzC,MAAOwC,EAAMxC,MACbH,OAAQ2C,EAAME,mBACdnC,IAAKiC,EAAMG,GACXxC,OAAQqC,EAAMrC,OACdC,SAAYoC,EAAMpC,kGAhElCyB,KAAKb,2FAqEE,IACCE,EAAWW,KAAKd,MAAhBG,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAQ,gBAC9BW,KAAKd,MAAMG,OAASW,KAAKU,gBAAkB,qBAlFlCK,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.033d892a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis';\n\n/*\nclass Movie extends Component {\n\n  static propTypes = {\n    title : propTypes.string.isRequired.\n    poster: propTypes.string.isRequired\n  }\n\n  render(){\n    return(\n      <div>\n        <MoviePoster poster={this.props.poster}/>\n        <h1>{this.props.title}</h1>\n      </div>\n    );\n  }\n}\n*/\n\n/*\nclass MoviePoster extends Component {\n  render(){\n    return(\n      <img src={this.props.poster} alt=\"Movie Poster\"/>\n    );\n  }\n}\n*/\n\n\nfunction Movie({title, poster, genres, synopsis}){\n  return (\n    <div className=\"Movie\">\n      <div className=\"Movie__Columns\">\n      <MoviePoster poster={poster} alt={title}/>\n      </div>\n      <div className=\"Movie__Columns\">\n        <h1>{title}</h1>\n        <div className=\"Movie__Genres\">\n          {genres.map((genre,index) =>\n            <MovieGenre genre={genre} key={index} />\n          )}\n        </div>\n        <div className=\"Movie__Synopsis\">\n          <LinesEllipsis\n            text = {synopsis}\n            maxLine='4'\n            ellipsis='...'\n            trimRight basedOn='letters' />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction MovieGenre({genre}){\n  return(\n    <span className=\"Movie__Genre\">{genre} </span>\n  )\n}\n\nfunction MoviePoster({poster, alt}){\n  return(\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n  )\n}\n\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired\n}\n\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n\nconst movieTitles = [\n  \"Matrix\",\n  \"Full Metal Jacket\",\n  \"Oldboy\",\n  \"Star Wars\"\n]\nconst movieImages = [\n  \"http://ticketimage.interpark.com/Movie/still_image/V16/V1601447p_s01.gif\",\n  \"https://img1.daumcdn.net/thumb/C155x225/?fname=http%3A%2F%2Ft1.daumcdn.net%2Fcfile%2F205CF91249EC79F00FFull Metal Jacket\",\n  \"http://movie.phinf.naver.net/20111222_177/1324537084439rmrVk_JPEG/movie_image.jpg\",\n  \"http://moonhak.co.kr/home/wp-content/uploads/bookcover/%EC%8A%A4%ED%83%80%EC%9B%8C%EC%A6%88-%EC%94%A8%EB%84%A4%EC%95%84%ED%8A%B84_%ED%91%9C1_web.jpg\"\n]\n\n\n/*        <Movie title={movieTitles[0]} poster={movieImages[0]}/>\n        <Movie title={movieTitles[1]} poster={movieImages[1]}/>\n        <Movie title={movieTitles[2]} poster={movieImages[2]}/>\n        <Movie title={movieTitles[3]} poster={movieImages[3]}/>*/\nclass App extends Component {\n\n  // Render: componentWillMount() => render() => componentDidMount()\n\n  // Update : componentWillReceiveProps() => shouldComponentUpdate => render() => componentDidUpdate()\n\n  state = {}\n\n  componentWillMount(){\n    this._getMovies();\n  }\n\n\n  //state  = {\n  //}\n\n  // state 를 변경하면 render가 다시 작동한다. (새로운 state와 함께)\n  componentDidMount(){\n\n    /*\n    setTimeout(() => {\n      this.setState({\n        movies : [\n          {\n            title: \"Matrix\",\n            poster: \"http://ticketimage.interpark.com/Movie/still_image/V16/V1601447p_s01.gif\"\n          },\n          {\n            title: \"Full Metal Jacket\",\n            poster: \"http://image.cine21.com/resize/cine21/poster/2009/1007/M0010010_[X230,330].jpg\"\n          },\n          {\n            title: \"Oldboy\",\n            poster: \"http://movie.phinf.naver.net/20111222_177/1324537084439rmrVk_JPEG/movie_image.jpg\"\n          },\n          {\n            title: \"Star Wars\",\n            poster: \"http://moonhak.co.kr/home/wp-content/uploads/bookcover/%EC%8A%A4%ED%83%80%EC%9B%8C%EC%A6%88-%EC%94%A8%EB%84%A4%EC%95%84%ED%8A%B84_%ED%91%9C1_web.jpg\"\n          },\n          {\n            title : \"Transformer\",\n            poster: \"http://tenasia.hankyung.com/webwp_kr/wp-content/uploads/2017/05/2017052208350415424-540x661.jpg\"\n          }\n        ]\n      })\n    }, 5000)\n    */\n  }\n\n\n   _getMovies = async () => {\n    // return value 가 무엇이든 movies 에 set 한다.\n    const movies = await this._callApi()\n    // 위 코드 실행 후 실행됨.\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () =>{\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      console.log(movie)\n      return <Movie title={movie.title}\n                    poster={movie.medium_cover_image}\n                    key={movie.id}\n                    genres={movie.genres}\n                    synopsis = {movie.synopsis}/>\n    })\n    return movies\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading ..'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}